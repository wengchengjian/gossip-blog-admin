import{_ as e,o as a,c as o,d as t}from"./app.d991dbbc.js";const p="/fantastic-admin/vue2/plop-page.gif",d="/fantastic-admin/vue2/plop-component.gif",c="/fantastic-admin/vue2/plop-store.gif",r="/fantastic-admin/vue2/plop-module.gif",k=JSON.parse('{"title":"快速生成文件","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"page","slug":"page","link":"#page","children":[]},{"level":2,"title":"component","slug":"component","link":"#component","children":[]},{"level":2,"title":"store","slug":"store","link":"#store","children":[]},{"level":2,"title":"module","slug":"module","link":"#module","children":[]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}],"relativePath":"guide-vue2/plop.md"}'),l={name:"guide-vue2/plop.md"},n=t('<h1 id="快速生成文件" tabindex="-1">快速生成文件 <sup class="pro-badge"></sup> <a class="header-anchor" href="#快速生成文件" aria-hidden="true">#</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p>开发过程中，避免不了手动去频繁创建页面、组件等文件，并且还要在文件里写一些必要的代码，是不是觉得很麻烦？现在你可以用更简洁的方式来处理这一切。</p><p>框架默认提供了 page（页面）、component（组件）、store（全局状态）、module（模块）共 4 种模式，通过 <code>yarn new</code> 指令可以自行选择。</p><h2 id="page" tabindex="-1">page <a class="header-anchor" href="#page" aria-hidden="true">#</a></h2><p><img src="'+p+'" alt=""></p><p>page 模式下，只能在 <code>/src/views/</code> 目录下选择指定的文件夹进行生成，生成的文件中，部分关键位置会被替换掉，例如 <code>&lt;page-header /&gt;</code> 中的 <code>title</code> 会按照你输入的中文名称替换，页面的 <code>name</code> 会根据当前文件目录和文件名自动生成，确保唯一。</p><h2 id="component" tabindex="-1">component <a class="header-anchor" href="#component" aria-hidden="true">#</a></h2><p><img src="'+d+'" alt=""></p><p>component 模式可以选择生成的是全局组件还是局部组件，全局组件生成目录为 <code>/src/components/</code> ，局部组件则在 <code>/src/views/</code> 目录下选择指定的文件夹进行生成。</p><h2 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h2><p><img src="'+c+'" alt=""></p><p>store 模式则会在 <code>/src/store/modules/</code> 目录下生成一个空模板</p><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h2><p><img src="'+r+'" alt=""></p><p>module 模式是一个标准模块模板，会在指定目录下生成模块文件夹，并且包含列表页、编辑（详情）页，以及相关局部组件。</p><p>这块部分详细介绍建议移步《<a href="./module.html">标准模块</a>》</p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>该功能基于 <a href="https://www.npmjs.com/package/plop" target="_blank" rel="noreferrer">plop</a> 实现，在扩展新的模式前，请先详细阅读 plop 文档。</p></div><p>除了框架提供的 4 种模式，你还可以自定义新的模式，其原理就是通过预设模板，按照特定规则创建文件或者文件夹。</p><p>预设模板文件存放在 <code>./plop-templates/</code> 目录下，并在 <code>./plopfile.js</code> 文件里进行引用，你可以参考现有 4 种模式的目录结构进行创建新的模板。</p>',21),s=[n];function i(h,m,u,_,g,f){return a(),o("div",null,s)}const b=e(l,[["render",i]]);export{k as __pageData,b as default};
