import{_ as e,o,c as t,d as i}from"./app.d991dbbc.js";const m=JSON.parse('{"title":"登录","description":"","frontmatter":{},"headers":[],"relativePath":"guide/login.md"}'),s={name:"guide/login.md"},c=i('<h1 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-hidden="true">#</a></h1><p>开发者通常在简单熟悉本框架后，涉及到的第一步业务开发就是修改登录功能，将其替换为自己的登录接口。</p><p>但在实践过程中，经常会遇到一些问题，比如：</p><ul><li>替换真实接口后，无法正常登录</li><li>登录接口请求成功，但是无法跳转到后台主页</li><li>...</li></ul><p>针对这些问题你需要依次检查以下几点：</p><ol><li>在 <code>.env.development</code> 里检查接口请求地址是否正确。</li><li>在 <code>/src/api/index.ts</code> 里修改响应拦截器里的代码，按照实际情况进行调整。例如什么状态下是请求成功，什么状态下是请求异常，并进行错误提示。</li><li>在 <code>/src/store/modules/user.ts</code> 里修改 <code>login</code> 函数，确保接口可以请求成功，并将返回的用户信息存储到 store 中进行全局管理。</li><li>在 <code>/src/store/modules/user.ts</code> 里修改 <code>isLogin</code> 计算属性，这部分需要根据实际存储的用户信息去判断是否登录。例如框架登录是返回 token 和失效时间，则验证是否登录也是通过这两个信息进行逻辑校验。</li></ol>',6),d=[c];function l(r,a,n,_,p,u){return o(),t("div",null,d)}const f=e(s,[["render",l]]);export{m as __pageData,f as default};
