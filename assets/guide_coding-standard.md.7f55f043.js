import{_ as e,o as t,c as i,d as l}from"./app.d991dbbc.js";const u=JSON.parse('{"title":"代码规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"IDE 配置","slug":"ide-配置","link":"#ide-配置","children":[]},{"level":2,"title":"ESLint 配置","slug":"eslint-配置","link":"#eslint-配置","children":[]},{"level":2,"title":"StyleLint 配置","slug":"stylelint-配置","link":"#stylelint-配置","children":[]},{"level":2,"title":"simple-git-hooks & lint-staged","slug":"simple-git-hooks-lint-staged","link":"#simple-git-hooks-lint-staged","children":[]}],"relativePath":"guide/coding-standard.md"}'),n={name:"guide/coding-standard.md"},a=l('<h1 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">建议</p><p>请确保已阅读《<a href="./ready.html#开发环境">准备工作 - 开发环境</a>》，并且按照文档说明安装好相关软件及扩展。</p></div><p>为保证代码风格统一，请使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> 做为开发 IDE ，框架源码里已提供相关配置文件，可直接测试效果：在保存代码时，会自动对当前文件进行代码格式化操作。</p><h2 id="ide-配置" tabindex="-1">IDE 配置 <a class="header-anchor" href="#ide-配置" aria-hidden="true">#</a></h2><p>配置文件为 <code>.editorconfig</code> ，通常情况下无需做任何修改。</p><h2 id="eslint-配置" tabindex="-1">ESLint 配置 <a class="header-anchor" href="#eslint-配置" aria-hidden="true">#</a></h2><p>配置文件为 <code>.eslintrc</code> ，框架使用 <a href="https://github.com/antfu/eslint-config" target="_blank" rel="noreferrer">antfu/eslint-config</a> 做为规范，并无增加其它配置，如果你对默认的规则有异议，可以查阅 <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> 官网规则并在 <code>.eslintrc</code> 文件中进行覆盖。</p><p>当你对规则进行修改后，原有的代码可能会因为规则的变动导致编辑器大量提示错误，你可以通过运行 <code>pnpm run lint:eslint</code> 进行一次格式校验，如果规则支持自动修复，则会将不符合规则的代码自动进行格式化。</p><h2 id="stylelint-配置" tabindex="-1">StyleLint 配置 <a class="header-anchor" href="#stylelint-配置" aria-hidden="true">#</a></h2><p>配置文件为 <code>.stylelintrc</code> 和 <code>.stylelintignore</code> ，如果你对默认的规则有异议，可以查阅 <a href="https://stylelint.io/" target="_blank" rel="noreferrer">Stylelint</a> 官网规则并在 <code>.stylelintrc</code> 文件中进行修改。</p><p>当你对规则进行修改后，原有的代码可能会因为规则的变动导致编辑器大量提示错误，你可以通过运行 <code>pnpm run lint:stylelint</code> 进行一次格式校验，如果规则支持自动修复，则会将不符合规则的代码自动进行格式化。</p><h2 id="simple-git-hooks-lint-staged" tabindex="-1">simple-git-hooks &amp; lint-staged <a class="header-anchor" href="#simple-git-hooks-lint-staged" aria-hidden="true">#</a></h2><p>由于 IDE 能做的事比较有限，只能对代码的书写规范进行格式化，对于一些无法自动修复的错误代码，如果没有改正到就被推送到 git 仓库，在多人协作开发时，可能会影响到别人的开发体验。所以框架集成了 <a href="https://github.com/toplenboren/simple-git-hooks" target="_blank" rel="noreferrer">simple-git-hooks</a> 和 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a> 这两个依赖来解决这一问题。</p><p>在提交代码时， simple-git-hooks 会通过 lint-staged 对 <code>/src</code> 目录下的 js vue scss 文件进行分别进行 eslint 和 stylelint 检测，如果有报错，则会阻止本次代码提交，直到开发者修改完所有错误代码后，才允许提交到 git 仓库，这样可以确保 git 仓库里的代码不会有语法错误。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通过修改 <code>.eslintignore</code>(需自行新建) 和 <code>.stylelintignore</code> 可忽略无需做代码规范校验的文件，例如在项目中导入了一些第三方的插件代码或组件代码，我们就可以将其进行忽略。</p></div>',15),s=[a];function r(o,d,c,h,p,g){return t(),i("div",null,s)}const f=e(n,[["render",r]]);export{u as __pageData,f as default};
